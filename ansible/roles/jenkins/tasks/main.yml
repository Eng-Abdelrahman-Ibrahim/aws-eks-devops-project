#ansible/roles/jenkins/tasks/main.yml
---
- name: Update packages
  ansible.builtin.dnf:
    name: '*'
    state: latest

- name: Add Jenkins repo
  ansible.builtin.get_url:
    url: https://pkg.jenkins.io/redhat-stable/jenkins.repo
    dest: /etc/yum.repos.d/jenkins.repo

- name: Import Jenkins key
  ansible.builtin.rpm_key:
    state: present
    key: https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key

- name: Install Java 21 (Corretto)
  ansible.builtin.dnf:
    name: java-21-amazon-corretto-devel
    state: present
  ignore_errors: yes  

- name: Install base packages
  ansible.builtin.dnf:
    name:
      - git
      - wget
      - unzip
      - tar
      - jq
      - python3
      - python3-pip
    state: present

- name: Install Jenkins
  ansible.builtin.dnf:
    name: jenkins
    state: latest

- name: Start Jenkins
  ansible.builtin.systemd:
    name: jenkins
    enabled: true
    state: started

- name: Install AWS CLI v2
  ansible.builtin.get_url:
    url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
    dest: "/tmp/awscliv2.zip"
  register: awscli_download

- name: Unzip AWS CLI
  ansible.builtin.unarchive:
    src: "/tmp/awscliv2.zip"
    dest: "/tmp/"
    remote_src: yes
  when: awscli_download.changed

- name: Install AWS CLI
  command: /tmp/aws/install
  args:
    creates: /usr/local/bin/aws

# ---- Tools required for pipeline ----

# ========================================
# DOCKER INSTALLATION FOR AMAZON LINUX 2023
# ========================================

- name: Install Docker (Amazon Linux 2023)
  ansible.builtin.dnf:  # Use dnf instead of yum
    name:
      - docker
    state: present

- name: Start and enable Docker service
  ansible.builtin.systemd:
    name: docker
    state: started
    enabled: yes

- name: Create docker group if it doesn't exist
  ansible.builtin.group:
    name: docker
    state: present

- name: Add current user to docker group
  ansible.builtin.user:
    name: jenkins
    groups: docker
    append: yes

- name: Ensure Docker config directory exists
  ansible.builtin.file:
    path: /etc/docker
    state: directory
    mode: '0755'

- name: Configure Docker daemon.json with Nexus insecure registry
  ansible.builtin.copy:
    dest: /etc/docker/daemon.json
    content: |
      {
        "insecure-registries": ["{{ nexus_registry_url }}"]
      }
    mode: '0644'

# ---- Docker Compose installation ----
- name: Ensure Docker CLI plugins directory exists
  ansible.builtin.file:
    path: /usr/local/lib/docker/cli-plugins
    state: directory
    mode: '0755'

- name: Download Docker Compose plugin
  ansible.builtin.get_url:
    url: "https://github.com/docker/compose/releases/download/v2.39.4/docker-compose-linux-x86_64"
    dest: /usr/local/lib/docker/cli-plugins/docker-compose
    mode: '0755'

- name: Verify Docker Compose installation
  ansible.builtin.command: docker compose version
  register: docker_compose_version
  changed_when: false

- name: Show Docker Compose version
  ansible.builtin.debug:
    msg: "{{ docker_compose_version.stdout }}"


- name: Restart Docker to apply new configuration
  ansible.builtin.systemd:
    name: docker
    state: restarted
    enabled: yes

- name: Persist NEXUS_REGISTRY env var globally
  ansible.builtin.copy:
    dest: /etc/profile.d/nexus_registry.sh
    content: |
      export NEXUS_REGISTRY={{ nexus_registry_url }}
    mode: '0644'

- name: Show configured Nexus Registry
  ansible.builtin.debug:
    msg: "Registry URL: {{ nexus_registry_url }}"

# ---- SSM Agent ----
- name: Install SSM Agent
  ansible.builtin.dnf:
    name: amazon-ssm-agent
    state: present

- name: Enable and start SSM Agent
  ansible.builtin.systemd:
    name: amazon-ssm-agent
    enabled: true
    state: started

# --- Resolve nginx_lb_hostname to IPs ---
- name: Resolve nginx_lb_hostname to IPs
  ansible.builtin.set_fact:
    nginx_lb_ips: "{{ lookup('community.general.dig', nginx_lb_hostname, 'qtype=A') }}"
  vars:
    nginx_lb_hostname: "{{ nginx_lb_hostname }}"

- name: Show resolved IPs
  ansible.builtin.debug:
    msg: "Resolved {{ nginx_lb_hostname }} -> {{ nginx_lb_ips }}"

# --- Update /etc/hosts with each IP ---
- name: Add nginx_lb_hostname IPs to /etc/hosts
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: "{{ item }} nexus.local dev.app.local test.app.local prod.app.local"
    state: present
  loop: "{{ nginx_lb_ips }}"
  become: true

- import_tasks: env.yml
