pipeline {
    agent any

    environment {
        DOCKER_COMPOSE_FILE = '../application/docker-compose.yaml'
        DOCKER_IMAGE = 'abdelrahmandevops/devops-app:latest'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout Code') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: 'main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Eng-Abdelrahman-Ibrahim/aws-eks-devops-project.git',
                        credentialsId: 'Github_Access'
                    ]],
                    extensions: [[$class: 'WipeWorkspace']]
                ])
            }
        }

        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Docker_Access',
                                                 usernameVariable: 'DOCKER_USER',
                                                 passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                    echo "Building Docker image from application directory..."
                    docker build -t ${DOCKER_IMAGE} ./application
                '''
            }
        }

        stage('Start Services') {
            steps {
                sh '''
                    echo "Starting PostgreSQL and app containers..."
                    docker-compose -f ${DOCKER_COMPOSE_FILE} up -d db server
                '''
            }
        }

        stage('Run API Tests') {
            steps {
                sh '''
                    echo "Running API tests inside Python container..."
                    docker-compose -f ${DOCKER_COMPOSE_FILE} run --rm test
                '''
            }
        }

        stage('Push Docker Image') {
            steps {
                sh '''
                    echo "Pushing Docker image to Docker Hub..."
                    docker push ${DOCKER_IMAGE}
                '''
            }
        }

        stage('Cleanup') {
            steps {
                sh '''
                    echo "Stopping and removing containers..."
                    docker-compose -f ${DOCKER_COMPOSE_FILE} down
                '''
            }
        }
    }

    post {
        always {
            echo "Pipeline completed. Cleaning Docker resources..."
            sh 'docker-compose -f ${DOCKER_COMPOSE_FILE} down || true'
        }
    }
}
