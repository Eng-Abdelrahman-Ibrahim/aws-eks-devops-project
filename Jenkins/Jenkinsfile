pipeline {
    agent any

    environment {
        DOCKER_COMPOSE_FILE = 'application/docker-compose.yml'
        DOCKER_IMAGE = 'abdelrahmandevops/devops-app:distroless'
    }

    stages {
        stage('Checkout') {
            steps {
                // Use GitHub PAT to checkout private repo
                checkout([$class: 'GitSCM',
                    branches: [[name: 'main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Eng-Abdelrahman-Ibrahim/aws-eks-devops-project.git',
                        credentialsId: 'Github_Access'  // replace with your Jenkins credential ID
                    ]]
                ])
            }
        }

        stage('Docker Login') {
            steps {
                // Use Docker Hub credentials
                withCredentials([usernamePassword(credentialsId: 'Docker_Access', 
                                                 usernameVariable: 'DOCKER_USER', 
                                                 passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                }
            }
        }

        stage('Pull App Image') {
            steps {
                sh "docker pull ${DOCKER_IMAGE}"
            }
        }

        stage('Start Services') {
            steps {
                sh "docker-compose -f ${DOCKER_COMPOSE_FILE} up -d"
            }
        }

        stage('Wait for DB') {
            steps {
                sh '''
                for i in {1..10}; do
                  if [ "$(docker inspect -f '{{.State.Health.Status}}' mydb)" == "healthy" ]; then
                    echo "Postgres is healthy!"
                    exit 0
                  fi
                  echo "Waiting for Postgres..."
                  sleep 5
                done
                exit 1
                '''
            }
        }

        stage('Run Tests') {
            steps {
                sh 'pytest application/Tests/test_api_dashboard.py --maxfail=1 --disable-warnings -q'
            }
        }

        stage('Clean Up') {
            steps {
                sh "docker-compose -f ${DOCKER_COMPOSE_FILE} down"
            }
        }
    }
}
