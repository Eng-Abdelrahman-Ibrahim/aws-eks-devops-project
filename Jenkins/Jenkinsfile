pipeline {
    agent any

    tools {
        maven "Maven"
        nodejs "NodeJS"
    }

    environment {
        // Docker images
        BACKEND_IMAGE = 'abdelrahmandevops/devops-backend'
        FRONTEND_IMAGE = 'abdelrahmandevops/devops-frontend'
        BUILD_TAG = "build-${env.BUILD_NUMBER}"

        // Dashboard API
        DASHBOARD_API = "http://app.local/api/deployments"
        DASHBOARD_URL = "http://app.local/app"

        // Docker Host
        DOCKER_HOST = 'unix:///var/run/docker.sock'

        // Docker Hub credentials
        DOCKERHUB_USER = credentials('DockerHub_Credentials')
        DOCKERHUB_PASS = credentials('DockerHub_Credentials')
        
        // Nexus credentials
        NEXUS_USER = credentials('Nexus_Credentials')
        NEXUS_PASS = credentials('Nexus_Credentials')

        // Directories
        EKS_DIR = "EKS/terraform"
        TERRAFORM_DIR = "terraform/servers-setup"
        ANSIBLE_DIR = "ansible"
        HELM_DIR = "helm"

        // SSH details
        ANSIBLE_USER = "ec2-user"
    }

    stages {

        stage('Clean Workspace') {
            steps { cleanWs() }
        }

        stage('Checkout Code') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: 'main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Eng-Abdelrahman-Ibrahim/aws-eks-devops-project.git',
                        credentialsId: 'Github_Access'
                    ]]
                ])
            }
        }

        stage('Build Backend Package') {
            steps {
                sh 'mvn clean package -DskipTests -f application/pom.xml'
            }
            post {
                success {
                    archiveArtifacts artifacts: 'application/target/*.jar', fingerprint: true
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('application/frontend') {
                    sh 'npm install'
                    sh 'npm run build'
                }
                archiveArtifacts artifacts: 'application/frontend/build/**', fingerprint: true
            }
        }

        stage('Get AWS Info') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'AWS_Admin_User', // your Jenkins AWS credentials ID
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    script {
                        // Fetch Nexus Load Balancer hostname
                        env.NEXUS_URL = sh(
                            script: """
                                aws elbv2 describe-load-balancers \
                                --query "LoadBalancers[?starts_with(DNSName, 'a2ce756cee7ab4bd4887d38870490b2b')].DNSName" \
                                --output text
                            """,
                            returnStdout: true
                        ).trim()
                       // After fetching NEXUS_URL
                            env.NEXUS_URL = "${env.NEXUS_URL}:8082"
                            env.NEXUS_REGISTRY = env.NEXUS_URL.replace('http://','')  // <-- use this for docker tag/push


                        // Fetch Bastion public IP
                        env.BASTION_IP = sh(
                            script: """
                                aws ec2 describe-instances \
                                --filters "Name=tag:Name,Values=bastion" "Name=instance-state-name,Values=running" \
                                --query "Reservations[0].Instances[0].PublicIpAddress" \
                                --output text
                            """,
                            returnStdout: true
                        ).trim()
                        echo "Bastion Public IP: ${env.BASTION_IP}"

                        // Fetch Ansible private IP
                        env.ANSIBLE_PRIVATE_IP = sh(
                            script: """
                                aws ec2 describe-instances \
                                --filters "Name=tag:Name,Values=ansible-control-machine" "Name=instance-state-name,Values=running" \
                                --query "Reservations[0].Instances[0].PrivateIpAddress" \
                                --output text
                            """,
                            returnStdout: true
                        ).trim()
                        echo "Ansible Private IP: ${env.ANSIBLE_PRIVATE_IP}"

                        // Fetch Ansible instance ID
                        env.ANSIBLE_INSTANCE_ID = sh(
                            script: """
                                aws ec2 describe-instances \
                                --filters "Name=tag:Name,Values=ansible-control-machine" "Name=instance-state-name,Values=running" \
                                --query "Reservations[0].Instances[0].InstanceId" \
                                --output text
                            """,
                            returnStdout: true
                        ).trim()
                        echo "Ansible Instance ID: ${env.ANSIBLE_INSTANCE_ID}"
                    }
                }
            }
        }


        stage('Docker Login') {
            steps {
                script {
                    // Docker Hub login
                    withCredentials([usernamePassword(credentialsId: 'DockerHub_Credentials', 
                                                    usernameVariable: 'DOCKER_USER', 
                                                    passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin 
                            docker info | grep Username 
                        """
                    }

                    // Nexus login
                    withCredentials([usernamePassword(credentialsId: 'Nexus_Credentials', 
                                                    usernameVariable: 'NEXUS_USER', 
                                                    passwordVariable: 'NEXUS_PASS')]) {
                        sh """
                            echo $NEXUS_PASS | docker login $NEXUS_URL -u $NEXUS_USER --password-stdin
                            docker info | grep Server
                        """
                    }
                }
            }
        }

        stage('Build and Push Docker Images') {
            steps {
                script {
                    // Build backend image
                    sh """
                        docker build -t ${BACKEND_IMAGE}:${BUILD_TAG} --build-arg JAR_FILE=application/target/backend-app.jar ./application
                        docker tag ${BACKEND_IMAGE}:${BUILD_TAG} ${BACKEND_IMAGE}:latest
                    """
                    // Build frontend image
                    sh """
                        docker build -t ${FRONTEND_IMAGE}:${BUILD_TAG} --build-arg BUILD_DIR=application/frontend/build --build-arg REACT_APP_API_URL=http://${NEXUS_URL}/app/api ./application/frontend
                        docker tag ${FRONTEND_IMAGE}:${BUILD_TAG} ${FRONTEND_IMAGE}:latest
                    """
                    // Push to Docker Hub
                    sh """
                        docker push ${BACKEND_IMAGE}:${BUILD_TAG}
                        docker push ${BACKEND_IMAGE}:latest
                        docker push ${FRONTEND_IMAGE}:${BUILD_TAG}
                        docker push ${FRONTEND_IMAGE}:latest
                    """
                    // Push to Nexus
                    sh """
                        docker tag ${BACKEND_IMAGE}:${BUILD_TAG} ${NEXUS_REGISTRY}/repository/docker-hosted/devops-backend:${BUILD_TAG}
                        docker push ${NEXUS_REGISTRY}/repository/docker-hosted/devops-backend:${BUILD_TAG}

                        docker tag ${FRONTEND_IMAGE}:${BUILD_TAG} ${NEXUS_REGISTRY}/repository/docker-hosted/devops-frontend:${BUILD_TAG}
                        docker push ${NEXUS_REGISTRY}/repository/docker-hosted/devops-frontend:${BUILD_TAG}
                    """
                }
            }
        }

        stage('Deploy with Ansible via SSM') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'AWS_Admin_User',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    script {
                        // Send SSM command and capture CommandId
                        def cmdOutput = sh(
                            script: """
                                aws ssm send-command \
                                    --targets "Key=InstanceIds,Values=${env.ANSIBLE_INSTANCE_ID}" \
                                    --document-name "AWS-RunShellScript" \
                                    --comment "Deploy Helm chart via Ansible" \
                                    --parameters 'commands=["export ANSIBLE_DEPRECATION_WARNINGS=False && cd /home/ec2-user/ansible && ansible-playbook -i inventory/hosts.ini playbooks/deploy-helm.yml"]' \
                                    --region us-east-1 \
                                    --query "Command.CommandId" --output text
                            """,
                            returnStdout: true
                        ).trim()
                        echo "SSM Command ID: ${cmdOutput}"

                        // Poll for command status
                        def status = ""
                        timeout(time: 15, unit: 'MINUTES') {
                            while (true) {
                                status = sh(
                                    script: "aws ssm list-command-invocations --command-id ${cmdOutput} --details --query 'CommandInvocations[0].Status' --output text",
                                    returnStdout: true
                                ).trim()
                                echo "Current SSM command status: ${status}"
                                if (status in ["Success","Failed","Cancelled","TimedOut"]) {
                                    break
                                }
                                sleep 10
                            }
                        }

                        // Fetch stdout and stderr
                        def output = sh(
                            script: "aws ssm get-command-invocation --command-id ${cmdOutput} --instance-id ${env.ANSIBLE_INSTANCE_ID} --query 'StandardOutputContent' --output text",
                            returnStdout: true
                        ).trim()
                        echo "Ansible Output:\n${output}"

                        def errorOutput = sh(
                            script: "aws ssm get-command-invocation --command-id ${cmdOutput} --instance-id ${env.ANSIBLE_INSTANCE_ID} --query 'StandardErrorContent' --output text",
                            returnStdout: true
                        ).trim()
                        echo "Ansible Error Output (warnings only):\n${errorOutput}"

                        // Inspect actual exit code from Ansible
                        def exitCode = sh(
                            script: "aws ssm get-command-invocation --command-id ${cmdOutput} --instance-id ${env.ANSIBLE_INSTANCE_ID} --query 'CommandPlugins[0].ResponseCode' --output text",
                            returnStdout: true
                        ).trim()
                        echo "Ansible Exit Code: ${exitCode}"

                        if (exitCode != "0") {
                            error("Ansible playbook failed (exit code ${exitCode}). Check SSM logs above.")
                        }
                    }
                }
            }
        }

    }

    post {
        always {
            echo "Pipeline completed. Notifying dashboard..."
            script {
                def headers = [[name: 'Content-Type', value: 'application/json']]

                // Echo the app URL for clarity
                echo "Dashboard URL: ${env.DASHBOARD_URL}"

                def payload = """{
                    "version": "build-${env.BUILD_NUMBER ?: '1.0.0'}",
                    "environment": "DEV",
                    "success": ${currentBuild.currentResult == 'SUCCESS'},
                    "notes": "Jenkins build ${env.BUILD_NUMBER} - ${currentBuild.currentResult}"
                }"""

                try {
                    httpRequest(
                        httpMode: 'POST',
                        url: env.DASHBOARD_API,
                        headers: headers,
                        requestBody: payload,
                        contentType: 'APPLICATION_JSON',
                        validResponseCodes: '100:399'
                    )
                    echo "Dashboard notified successfully."
                } catch (e) {
                    echo "Failed to notify dashboard: ${e.getMessage()}"
                }
            }

            echo "Cleaning up Docker resources..."
            sh 'cd application && docker compose down || true'
        }
    }
}
