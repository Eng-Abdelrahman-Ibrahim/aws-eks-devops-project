pipeline {
    agent any

    environment {
        DOCKER_COMPOSE_FILE = './application/docker-compose.yaml'
        BACKEND_IMAGE = 'abdelrahmandevops/devops-app:latest'
        FRONTEND_IMAGE = 'abdelrahmandevops/devops-frontend:latest'
        API_URL = 'http://localhost:8080/api/deployments' // API test
    }

    stages {
        stage('Clean Workspace') {
            steps { cleanWs() }
        }

        stage('Checkout Code') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: 'main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Eng-Abdelrahman-Ibrahim/aws-eks-devops-project.git',
                        credentialsId: 'Github_Access'
                    ]]
                ])
            }
        }

        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Docker_Access',
                                                 usernameVariable: 'DOCKER_USER',
                                                 passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin'
                }
            }
        }

        stage('Build Backend Image') {
            steps {
                sh '''
                    echo "Building backend Docker image..."
                    docker build -t ${BACKEND_IMAGE} ./application
                '''
            }
        }

        stage('Build Frontend Image') {
            steps {
                sh '''
                    echo "Building frontend Docker image..."
                    docker build -t ${FRONTEND_IMAGE} ./application/frontend
                '''
            }
        }

        stage('Start Services') {
            steps {
                sh '''
                    echo "Starting all services..."
                    docker-compose -f ${DOCKER_COMPOSE_FILE} up -d
                '''
            }
        }

        stage('Run API Tests') {
            steps {
                sh '''
                    echo "Running backend API tests..."
                    docker-compose -f ${DOCKER_COMPOSE_FILE} run --rm test
                '''
            }
        }

        stage('Push Docker Images') {
            steps {
                sh '''
                    echo "Pushing backend image..."
                    docker push ${BACKEND_IMAGE}
                    echo "Pushing frontend image..."
                    docker push ${FRONTEND_IMAGE}
                '''
            }
        }

        stage('Cleanup') {
            steps {
                sh 'docker-compose -f ${DOCKER_COMPOSE_FILE} down'
            }
        }
    }

    post {
        success {
            echo "Build succeeded. Sending success deployment to API..."
            script {
                def payload = [
                    version: "1.0.${BUILD_NUMBER}",
                    environment: "PROD",
                    success: true,
                    notes: "Jenkins build #${BUILD_NUMBER} succeeded"
                ]
                httpRequest acceptType: 'APPLICATION_JSON',
                            contentType: 'APPLICATION_JSON',
                            httpMode: 'POST',
                            requestBody: groovy.json.JsonOutput.toJson(payload),
                            url: "${API_URL}"
            }
        }

        failure {
            echo "Build failed. Sending failure deployment to API..."
            script {
                def payload = [
                    version: "1.0.${BUILD_NUMBER}",
                    environment: "PROD",
                    success: false,
                    notes: "Jenkins build #${BUILD_NUMBER} failed"
                ]
                httpRequest acceptType: 'APPLICATION_JSON',
                            contentType: 'APPLICATION_JSON',
                            httpMode: 'POST',
                            requestBody: groovy.json.JsonOutput.toJson(payload),
                            url: "${API_URL}"
            }
        }

        always {
            echo "Pipeline completed. Cleaning up Docker resources..."
            sh 'docker-compose -f ${DOCKER_COMPOSE_FILE} down || true'
        }
    }
}
