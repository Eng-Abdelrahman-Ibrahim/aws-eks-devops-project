pipeline {
    agent any

    environment {
        DOCKER_COMPOSE_FILE = './application/docker-compose.yaml'
        BACKEND_IMAGE = 'abdelrahmandevops/devops-app:latest'
        FRONTEND_IMAGE = 'abdelrahmandevops/devops-frontend:latest'
        DASHBOARD_API = "http://backend:8080/api/deployments"
        DOCKER_HOST = 'unix:///var/run/docker.sock'
    }

    stages {
        stage('Clean Workspace') {
            steps { cleanWs() }
        }

        stage('Checkout Code') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: 'main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Eng-Abdelrahman-Ibrahim/aws-eks-devops-project.git',
                        credentialsId: 'Github_Access'
                    ]]
                ])
            }
        }

        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Docker_Access',
                                                 usernameVariable: 'DOCKER_USER',
                                                 passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin'
                }
            }
        }

        stage('Build Backend Image') {
            steps {
                sh '''
                    echo "Building backend Docker image..."
                    docker build -t ${BACKEND_IMAGE} ./application
                '''
            }
        }

        stage('Build Frontend Image') {
            steps {
                sh '''
                    echo "Building frontend Docker image..."
                    docker build -t ${FRONTEND_IMAGE} ./application/frontend
                '''
            }
        }

        stage('Run API Tests') {
            steps {
                sh '''
                    echo "Rebuilding test image..."
                    docker compose -f ${DOCKER_COMPOSE_FILE} build --no-cache test
            
                    echo "Running backend API tests..."
                    docker compose -f ${DOCKER_COMPOSE_FILE} run --rm test
                  '''
            }
        }
    
        stage('Notify Dashboard') {
            steps {
                script {
                    def headers = [:]
                    if (env.DASHBOARD_TOKEN) {
                        headers['Authorization'] = "Bearer ${env.DASHBOARD_TOKEN}"
                    }
                    headers['Content-Type'] = 'application/json'
                    
                    def payload = """{
                        "ref": "refs/heads/main",
                        "status": "${currentBuild.currentResult}"
                    }"""
                    
                    httpRequest(
                        httpMode: 'POST',
                        url: env.DASHBOARD_API,
                        customHeaders: headers.collect { k, v -> [name: k, value: v] },
                        requestBody: payload,
                        contentType: 'APPLICATION_JSON',
                        validResponseCodes: '100:399'
                    )
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                sh '''
                    echo "Pushing backend image..."
                    docker push ${BACKEND_IMAGE}
                    echo "Pushing frontend image..."
                    docker push ${FRONTEND_IMAGE}
                '''
            }
        }

        stage('Cleanup') {
            steps {
                sh 'docker compose -f ${DOCKER_COMPOSE_FILE} down'
            }
        }
    }

    post {
    always {
        echo "Pipeline completed. Notifying dashboard..."
        script {
            def headers = [:]
            if (env.DASHBOARD_TOKEN) {
                headers['Authorization'] = "Bearer ${env.DASHBOARD_TOKEN}"
            }
            headers['Content-Type'] = 'application/json'

            def payload = """{
                "ref": "refs/heads/main",
                "status": "${currentBuild.currentResult}"
            }"""

            try {
                httpRequest(
                    httpMode: 'POST',
                    url: env.DASHBOARD_API,
                    customHeaders: headers.collect { k, v -> [name: k, value: v] },
                    requestBody: payload,
                    contentType: 'APPLICATION_JSON',
                    validResponseCodes: '100:399'
                )
                echo "Dashboard notified successfully."
            } catch (e) {
                echo "Failed to notify dashboard: ${e.getMessage()}"
            }
        }

        echo "Cleaning up Docker resources..."
        sh 'docker compose -f ${DOCKER_COMPOSE_FILE} down || true'
    }
 }
}
