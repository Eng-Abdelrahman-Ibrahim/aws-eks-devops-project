pipeline {
    agent any

    tools {
        maven "Maven"
        nodejs "NodeJS"
    }

    environment {
        DOCKER_COMPOSE_FILE = './application/docker-compose.yaml'
        BACKEND_IMAGE = 'abdelrahmandevops/devops-app'
        FRONTEND_IMAGE = 'abdelrahmandevops/devops-frontend'
        BUILD_TAG = "build-${env.BUILD_NUMBER}"
        DASHBOARD_API = "http://host.docker.internal:8080/api/deployments"
        DOCKER_HOST = 'unix:///var/run/docker.sock'

        # Docker Hub credentials stored in Jenkins Credentials
        DOCKERHUB_USER = credentials('DockerHub_Username')
        DOCKERHUB_PASS = credentials('DockerHub_Password')

        # Nexus credentials stored in Jenkins Credentials
        NEXUS_USER = credentials('Nexus_Username')
        NEXUS_PASS = credentials('Nexus_Password')
        NEXUS_URL = 'nexus.local/repository/docker-hosted'

        # Ansible SSH
        ANSIBLE_HOST = ''
        ANSIBLE_USER = 'ec2-user'
        ANSIBLE_KEY = '~/.ssh/deployer-one'
    }

    stages {
        stage('Clean Workspace') {
            steps { cleanWs() }
        }

        stage('Checkout Code') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: 'main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Eng-Abdelrahman-Ibrahim/aws-eks-devops-project.git',
                        credentialsId: 'Github_Access'
                    ]]
                ])
            }
        }

        stage('Build Backend Package') {
            steps {
                sh 'mvn clean package -DskipTests -f application/pom.xml'
            }
            post {
                success {
                    archiveArtifacts artifacts: 'application/target/*.jar', fingerprint: true
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('application/frontend') {
                    sh 'npm install'
                    sh 'npm run build'
                }
                archiveArtifacts artifacts: 'application/frontend/build/**', fingerprint: true
            }
        }

        stage('Docker Login to Docker Hub') {
            steps {
                sh 'echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin'
            }
        }

        stage('Docker Login to Nexus') {
            steps {
                sh 'echo "$NEXUS_PASS" | docker login $NEXUS_URL -u "$NEXUS_USER" --password-stdin'
            }
        }

        stage('Build Backend Docker Image') {
            steps {
                sh """
                    docker build -t ${BACKEND_IMAGE}:${BUILD_TAG} \
                        --build-arg JAR_FILE=application/target/backend-app.jar \
                        ./application
                """
            }
        }

        stage('Build Frontend Docker Image') {
            steps {
                sh """
                    docker build -t ${FRONTEND_IMAGE}:${BUILD_TAG} \
                        --build-arg BUILD_DIR=application/frontend/build \
                        ./application/frontend
                """
            }
        }

        stage('Push Docker Images to Docker Hub') {
            steps {
                sh """
                    docker tag ${BACKEND_IMAGE}:${BUILD_TAG} ${BACKEND_IMAGE}:latest
                    docker tag ${FRONTEND_IMAGE}:${BUILD_TAG} ${FRONTEND_IMAGE}:latest

                    docker push ${BACKEND_IMAGE}:${BUILD_TAG}
                    docker push ${BACKEND_IMAGE}:latest

                    docker push ${FRONTEND_IMAGE}:${BUILD_TAG}
                    docker push ${FRONTEND_IMAGE}:latest
                """
            }
        }

        stage('Push Docker Images to Nexus') {
            steps {
                sh """
                    docker tag ${BACKEND_IMAGE}:${BUILD_TAG} ${NEXUS_URL}/backend:${BUILD_TAG}
                    docker tag ${FRONTEND_IMAGE}:${BUILD_TAG} ${NEXUS_URL}/frontend:${BUILD_TAG}

                    docker push ${NEXUS_URL}/backend:${BUILD_TAG}
                    docker push ${NEXUS_URL}/frontend:${BUILD_TAG}
                """
            }
        }

        stage('Terraform: Provision Amazon EKS cluster') {
            steps {
                dir('EKS/terraform') {
                    sh """
                        terraform init
                        terraform apply -auto-approve \
                            -var backend_image=${NEXUS_URL}/backend:${BUILD_TAG} \
                            -var frontend_image=${NEXUS_URL}/frontend:${BUILD_TAG}
                    """
                }
            }
        }
        stages {
            stage('Get Ansible EC2 Public IP') {
                steps {
                    script {
                        // Navigate to Terraform directory
                        dir('../terraform/servers-setup') {
                            // Get Terraform output
                            def ip = sh(script: "terraform output -raw ansible_public_ip", returnStdout: true).trim()
                            env.ANSIBLE_HOST = "${ANSIBLE_USER}@${ip}"
                            echo "Ansible EC2 host: ${env.ANSIBLE_HOST}"
                        }
                    }
                }
            }
}            
        stage('Run Ansible for Nexus + App Deployment') {
            steps {
                sh """
                    ssh -i ${ANSIBLE_KEY} ${ANSIBLE_HOST} \
                    'cd ~/ansible && \
                     ansible-playbook -i inventory playbooks/install-controller.yml && \
                     ansible-playbook -i inventory playbooks/install-nexus.yml && \
                     ansible-playbook -i inventory playbooks/deploy-app.yml --extra-vars "BACKEND_IMAGE=${NEXUS_URL}/backend:${BUILD_TAG} FRONTEND_IMAGE=${NEXUS_URL}/frontend:${BUILD_TAG}"'
                """
            }
        }
    }

    post {
        always {
            echo "Pipeline completed. Notifying dashboard..."
            script {
                def headers = [[name: 'Content-Type', value: 'application/json']]
                def payload = """{
                    "version": "build-${env.BUILD_NUMBER ?: '1.0.0'}",
                    "environment": "DEV",
                    "success": ${currentBuild.currentResult == 'SUCCESS'},
                    "notes": "Jenkins build ${env.BUILD_NUMBER} - ${currentBuild.currentResult}"
                }"""
                try {
                    httpRequest(
                        httpMode: 'POST',
                        url: env.DASHBOARD_API,
                        headers: headers,
                        requestBody: payload,
                        contentType: 'APPLICATION_JSON',
                        validResponseCodes: '100:399'
                    )
                    echo "Dashboard notified successfully."
                } catch (e) {
                    echo "Failed to notify dashboard: ${e.getMessage()}"
                }
            }

            echo "Cleaning up Docker resources..."
            sh 'cd application && docker compose down || true'
        }
    }
}
