pipeline {
    agent any

    environment {
        DOCKER_COMPOSE_FILE = 'application\\compose.yaml'
        DOCKER_IMAGE = 'abdelrahmandevops/devops-app:distroless'
        PYTHON_PATH = 'C:\\Python313\\python.exe'
        VENV_PATH = 'venv'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: 'main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Eng-Abdelrahman-Ibrahim/aws-eks-devops-project.git',
                        credentialsId: 'Github_Access'
                    ]],
                    extensions: [[$class: 'WipeWorkspace']]
                ])
            }
        }

        stage('Install Python if Missing') {
            steps {
                script {
                    def pythonAvailable = bat(script: 'python --version 2>nul', returnStatus: true) == 0
                    if (!pythonAvailable) {
                        echo "Python not found. Installing via Chocolatey..."
                        def chocoInstalled = bat(script: 'where choco 2>nul', returnStatus: true) == 0
                        if (!chocoInstalled) {
                            bat '''
                                @echo off
                                echo Installing Chocolatey...
                                Set-ExecutionPolicy Bypass -Scope Process -Force
                                [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
                                iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
                            '''
                        }
                        bat '''
                            @echo off
                            echo Installing Python...
                            choco install python -y --no-progress
                            call refreshenv
                        '''
                    } else {
                        echo "Python already installed"
                    }
                }
            }
        }

        stage('Setup Virtual Environment & Install Dependencies') {
            steps {
                bat """
                    @echo off
                    echo Creating virtual environment...
                    "%PYTHON_PATH%" -m venv %VENV_PATH%
                    
                    echo Activating virtual environment and installing requirements...
                    call %VENV_PATH%\\Scripts\\activate
                    pip install --upgrade pip
                    if exist application\\requirements.txt (
                        pip install -r application\\requirements.txt
                    ) else (
                        pip install requests pytest
                    )
                    deactivate
                """
            }
        }

        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Docker_Access',
                                                 usernameVariable: 'DOCKER_USER',
                                                 passwordVariable: 'DOCKER_PASS')]) {
                    bat """
                        @echo off
                        echo %DOCKER_PASS% | docker login -u %DOCKER_USER% --password-stdin
                    """
                }
            }
        }

        stage('Pull App Image') {
            steps {
                bat "docker pull %DOCKER_IMAGE%"
            }
        }

        stage('Start Services') {
            steps {
                bat "docker-compose -f %DOCKER_COMPOSE_FILE% up -d"
            }
        }

        stage('Wait for DB') {
            steps {
                bat '''
                    @echo off
                    setlocal enabledelayedexpansion
                    for /l %%i in (1,1,10) do (
                        for /f "tokens=*" %%s in ('docker inspect -f "{{.State.Health.Status}}" mydb') do set STATUS=%%s
                        if "!STATUS!"=="healthy" (
                            echo Postgres is healthy!
                            exit /b 0
                        )
                        echo Waiting for Postgres...
                        timeout /t 5 > nul
                    )
                    exit /b 1
                '''
            }
        }

        stage('Run Tests') {
            steps {
                bat """
                    @echo off
                    echo Running tests in virtual environment...
                    call %VENV_PATH%\\Scripts\\activate
                    python -m pytest application\\Tests\\test_api_dashboard.py --maxfail=1 --disable-warnings -q
                    set RESULT=%ERRORLEVEL%
                    deactivate
                    exit /b %RESULT%
                """
            }
        }

        stage('Clean Up') {
            steps {
                bat "docker-compose -f %DOCKER_COMPOSE_FILE% down"
            }
        }
    }

    post {
        always {
            echo "Pipeline completed - cleaning up Docker resources"
            bat "docker-compose -f %DOCKER_COMPOSE_FILE% down 2>nul || true"
        }
    }
}
